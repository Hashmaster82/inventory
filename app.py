import json
import os
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
from datetime import datetime
import webbrowser
from fpdf import FPDF
import tkinter.font as tkFont
import shutil


class PDFWithCyrillic(FPDF):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.add_font('ChakraPetch', '', 'ChakraPetch-Regular.ttf', uni=True)


class InventoryApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–°–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
        self.root.state('zoomed')

        self.default_font = tkFont.Font(family='Arial', size=14)
        self.root.option_add("*Font", self.default_font)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        self.inventory_file = r"\\fs\SHARE_BH\it\inventory\inventory.json"
        self.inventory_data = self.load_data()

        # –§–∞–π–ª —Ç–∏–ø–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        self.equipment_types_file = "equipment_types.json"
        self.equipment_types = self.load_equipment_types()

        self.create_widgets()

    # =============== –†–ê–ë–û–¢–ê –° –¢–ò–ü–ê–ú–ò –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø ===============
    def load_equipment_types(self):
        try:
            if os.path.exists(self.equipment_types_file):
                with open(self.equipment_types_file, 'r', encoding='utf-8') as file:
                    data = json.load(file)
                    return data if isinstance(data, list) else []
            else:
                default_types = ["–ú–æ–Ω–∏—Ç–æ—Ä", "–°–∏—Å–±–ª–æ–∫", "–ú–§–£", "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞", "–ú—ã—à—å", "–ù–∞—É—à–Ω–∏–∫–∏"]
                self.save_equipment_types(default_types)
                return default_types
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∏–ø—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {e}")
            return []

    def save_equipment_types(self, types_list):
        try:
            with open(self.equipment_types_file, 'w', encoding='utf-8') as file:
                json.dump(types_list, file, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∏–ø—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {e}")
            return False

    # =============== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ===============
    def load_data(self):
        try:
            if os.path.exists(self.inventory_file):
                with open(self.inventory_file, 'r', encoding='utf-8') as file:
                    return json.load(file)
            else:
                with open(self.inventory_file, 'w', encoding='utf-8') as file:
                    json.dump([], file)
                return []
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
            return []

    def save_data(self):
        try:
            os.makedirs(os.path.dirname(self.inventory_file), exist_ok=True)
            with open(self.inventory_file, 'w', encoding='utf-8') as file:
                json.dump(self.inventory_data, file, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
            return False

    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ JSON —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(self.inventory_file):
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–§–∞–π–ª –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return

            backup_dir = os.path.join(os.path.dirname(self.inventory_file), "backups")
            os.makedirs(backup_dir, exist_ok=True)

            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_filename = f"inventory_backup_{timestamp}.json"
            backup_path = os.path.join(backup_dir, backup_filename)

            shutil.copy2(self.inventory_file, backup_path)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞:\n{backup_path}")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")

    def bind_clipboard_events(self, widget):
        def do_copy(event):
            widget.event_generate("<<Copy>>")
            return "break"

        def do_cut(event):
            widget.event_generate("<<Cut>>")
            return "break"

        def do_paste(event):
            widget.event_generate("<<Paste>>")
            return "break"

        widget.bind("<Control-c>", do_copy)
        widget.bind("<Control-x>", do_cut)
        widget.bind("<Control-v>", do_paste)

    def create_widgets(self):
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)

        button_frame = ttk.Frame(main_frame)
        button_frame.pack(pady=10, fill='x')

        backup_button = ttk.Button(button_frame, text="üìÇ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é",
                                   command=self.create_backup, style='Big.TButton')
        backup_button.pack(side='left', padx=5, fill='x', expand=True)

        pdf_button = ttk.Button(button_frame, text="üìÑ –í—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ PDF",
                                command=self.export_to_pdf, style='Big.TButton')
        pdf_button.pack(side='left', padx=5, fill='x', expand=True)

        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill='both', expand=True)

        style = ttk.Style()
        style.configure('Big.TButton', font=('Arial', 18, 'bold'))
        style.configure('TNotebook.Tab', font=('Arial', 16, 'bold'), padding=[20, 10])

        self.add_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.add_frame, text="–î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")

        self.search_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.search_frame, text="–ü–æ–∏—Å–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")

        self.employee_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.employee_frame, text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")

        self.show_all_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.show_all_frame, text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë")

        # –ù–û–í–ê–Ø –í–ö–õ–ê–î–ö–ê: –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
        self.equipment_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.equipment_frame, text="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")

        # –ù–û–í–ê–Ø –í–ö–õ–ê–î–ö–ê: –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.settings_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        self.about_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.about_frame, text="–ò–Ω—Ñ–æ")

        self.create_add_tab()
        self.create_search_tab()
        self.create_employee_tab()
        self.create_show_all_tab()
        self.create_equipment_tab()      # <-- –ù–û–í–´–ô –ú–ï–¢–û–î
        self.create_settings_tab()       # <-- –ù–û–í–´–ô –ú–ï–¢–û–î
        self.create_about_tab()

    # =============== –í–ö–õ–ê–î–ö–ê: –û–ë–û–†–£–î–û–í–ê–ù–ò–ï ===============
    def create_equipment_tab(self):
        frame = self.equipment_frame

        ttk.Label(frame, text="–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:", font=self.default_font).grid(row=0, column=0, sticky='w', padx=10, pady=5)
        self.equipment_type_entry = ttk.Entry(frame, width=40, font=self.default_font)
        self.equipment_type_entry.grid(row=0, column=1, padx=10, pady=5, sticky='we')
        self.bind_clipboard_events(self.equipment_type_entry)

        add_btn = ttk.Button(frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø", command=self.add_equipment_type, style='Big.TButton')
        add_btn.grid(row=0, column=2, padx=10, pady=5)

        # –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤
        columns = ("–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",)
        self.equipment_tree = ttk.Treeview(frame, columns=columns, show='headings', height=15)
        self.equipment_tree.heading("–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", text="–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
        self.equipment_tree.column("–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", width=300, anchor='center')

        self.equipment_tree.bind('<Button-3>', self.show_equipment_context_menu)

        scrollbar = ttk.Scrollbar(frame, orient="vertical", command=self.equipment_tree.yview)
        self.equipment_tree.configure(yscrollcommand=scrollbar.set)

        self.equipment_tree.grid(row=1, column=0, columnspan=3, padx=10, pady=5, sticky='nsew')
        scrollbar.grid(row=1, column=3, sticky='ns', pady=5)

        self.equipment_context_menu = tk.Menu(self.equipment_tree, tearoff=0)
        self.equipment_context_menu.add_command(label="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–∏–ø", command=self.delete_equipment_type)

        frame.columnconfigure(1, weight=1)
        frame.rowconfigure(1, weight=1)

        self.refresh_equipment_list()

    def refresh_equipment_list(self):
        for item in self.equipment_tree.get_children():
            self.equipment_tree.delete(item)
        for eq_type in sorted(self.equipment_types):
            self.equipment_tree.insert("", "end", values=(eq_type,))

    def add_equipment_type(self):
        new_type = self.equipment_type_entry.get().strip()
        if not new_type:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
            return
        if new_type in self.equipment_types:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–¢–∞–∫–æ–π —Ç–∏–ø —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        self.equipment_types.append(new_type)
        if self.save_equipment_types(self.equipment_types):
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω")
            self.equipment_type_entry.delete(0, tk.END)
            self.refresh_equipment_list()
            # –û–±–Ω–æ–≤–ª—è–µ–º Combobox –≤ add_tab, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å–æ–∑–¥–∞–Ω
            if hasattr(self, 'equipment_type_combo'):
                self.equipment_type_combo['values'] = sorted(self.equipment_types)

    def show_equipment_context_menu(self, event):
        item = self.equipment_tree.identify_row(event.y)
        if item:
            self.equipment_tree.selection_set(item)
            self.equipment_context_menu.post(event.x_root, event.y_root)

    def delete_equipment_type(self):
        selected_items = self.equipment_tree.selection()
        if not selected_items:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        selected_type = self.equipment_tree.item(selected_items[0], 'values')[0]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —Ç–∏–ø –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        in_use = any(item.get('equipment_type') == selected_type for item in self.inventory_data)
        if in_use:
            if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                       f"–¢–∏–ø '{selected_type}' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞–ø–∏—Å—è—Ö. –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏?"):
                return
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–∏–º —Ç–∏–ø–æ–º
            self.inventory_data = [item for item in self.inventory_data if item.get('equipment_type') != selected_type]
            self.save_data()
            self.show_all_data()

        self.equipment_types.remove(selected_type)
        if self.save_equipment_types(self.equipment_types):
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω")
            self.refresh_equipment_list()
            if hasattr(self, 'equipment_type_combo'):
                self.equipment_type_combo['values'] = sorted(self.equipment_types)

    # =============== –í–ö–õ–ê–î–ö–ê: –ù–ê–°–¢–†–û–ô–ö–ò ===============
    def create_settings_tab(self):
        frame = self.settings_frame

        ttk.Label(frame, text="–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª –±–∞–∑—ã:", font=self.default_font).pack(pady=10)
        self.current_path_label = ttk.Label(frame, text=self.inventory_file, font=self.default_font, wraplength=800)
        self.current_path_label.pack(pady=5)

        change_btn = ttk.Button(frame, text="üìÇ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª", command=self.change_inventory_file, style='Big.TButton')
        change_btn.pack(pady=20)

        ttk.Label(frame, text="‚ö†Ô∏è –ü–æ—Å–ª–µ —Å–º–µ–Ω—ã —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã", font=self.default_font, foreground="red").pack(pady=10)

    def change_inventory_file(self):
        new_file = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ JSON-—Ñ–∞–π–ª –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        if not new_file:
            return

        # –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª
        try:
            with open(new_file, 'r', encoding='utf-8') as f:
                test_data = json.load(f)
                if not isinstance(test_data, list):
                    raise ValueError("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª:\n{e}")
            return

        self.inventory_file = new_file
        self.inventory_data = self.load_data()
        self.current_path_label.config(text=self.inventory_file)
        self.show_all_data()
        self.refresh_employee_list()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–§–∞–π–ª –±–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")

    # =============== –í–ö–õ–ê–î–ö–ê: –î–û–ë–ê–í–ò–¢–¨ –û–ë–û–†–£–î–û–í–ê–ù–ò–ï ===============
    def create_add_tab(self):
        fields = [
            ("–ú–æ–¥–µ–ª—å", "model"),
            ("–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä", "serial_number"),
            ("–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ", "assignment"),
            ("–î–∞—Ç–∞", "date"),
            ("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", "comments")
        ]
        self.entries = {}

        # –ü–æ–ª–µ "–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è" ‚Äî —Ç–µ–ø–µ—Ä—å Combobox
        ttk.Label(self.add_frame, text="–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:").grid(row=0, column=0, sticky='w', padx=10, pady=5)
        self.equipment_type_var = tk.StringVar()
        self.equipment_type_combo = ttk.Combobox(self.add_frame, textvariable=self.equipment_type_var,
                                                 values=sorted(self.equipment_types), width=38, font=self.default_font)
        self.equipment_type_combo.grid(row=0, column=1, padx=10, pady=5, sticky='we')
        self.bind_clipboard_events(self.equipment_type_combo)
        self.entries['equipment_type'] = self.equipment_type_combo  # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å add_equipment()

        row_offset = 1
        for i, (label_text, field_name) in enumerate(fields):
            label = ttk.Label(self.add_frame, text=label_text + ":")
            label.grid(row=i + row_offset, column=0, sticky='w', padx=10, pady=5)
            if field_name == "comments":
                entry = scrolledtext.ScrolledText(self.add_frame, width=40, height=4, font=self.default_font)
                entry.grid(row=i + row_offset, column=1, padx=10, pady=5, sticky='we')
                self.bind_clipboard_events(entry)
            elif field_name == "date":
                entry = ttk.Entry(self.add_frame, width=40, font=self.default_font)
                entry.insert(0, datetime.now().strftime("%d.%m.%Y"))
                entry.grid(row=i + row_offset, column=1, padx=10, pady=5, sticky='we')
                self.bind_clipboard_events(entry)
            else:
                entry = ttk.Entry(self.add_frame, width=40, font=self.default_font)
                entry.grid(row=i + row_offset, column=1, padx=10, pady=5, sticky='we')
                self.bind_clipboard_events(entry)
            self.entries[field_name] = entry

        add_button = ttk.Button(self.add_frame, text="–î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                                command=self.add_equipment, style='Big.TButton')
        add_button.grid(row=len(fields) + row_offset, column=0, columnspan=2, pady=20)
        self.add_frame.columnconfigure(1, weight=1)
        self.add_frame.rowconfigure(len(fields) + row_offset, weight=1)

    # =============== –í–ö–õ–ê–î–ö–ê: –ü–û–ò–°–ö –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø ===============
    def create_search_tab(self):
        ttk.Label(self.search_frame, text="–ü–æ–∏—Å–∫:", font=self.default_font).grid(row=0, column=0, sticky='w', padx=10,
                                                                                 pady=5)
        self.search_entry = ttk.Entry(self.search_frame, width=40, font=self.default_font)
        self.search_entry.grid(row=0, column=1, padx=10, pady=5, sticky='we')
        self.bind_clipboard_events(self.search_entry)
        self.search_entry.bind('<KeyRelease>', self.perform_search)

        clear_button = ttk.Button(self.search_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_search, style='Big.TButton')
        clear_button.grid(row=0, column=2, padx=10, pady=5)

        columns = ("–¢–∏–ø", "–ú–æ–¥–µ–ª—å", "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä", "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ", "–î–∞—Ç–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
        self.search_tree = ttk.Treeview(self.search_frame, columns=columns, show='headings', height=15)

        for col in columns:
            self.search_tree.heading(col, text=col,
                                     command=lambda _col=col: self.treeview_sort_column(self.search_tree, _col, False))
            self.search_tree.column(col, width=150, anchor='center')

        self.search_tree.bind('<Double-1>', self.on_tree_double_click)
        self.search_tree.bind('<Button-3>', self.show_context_menu)

        scrollbar = ttk.Scrollbar(self.search_frame, orient="vertical", command=self.search_tree.yview)
        self.search_tree.configure(yscrollcommand=scrollbar.set)

        self.search_tree.grid(row=1, column=0, columnspan=3, padx=10, pady=5, sticky='nsew')
        scrollbar.grid(row=1, column=3, sticky='ns', pady=5)

        export_pdf_btn = ttk.Button(self.search_frame, text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ PDF",
                                    command=self.export_search_results_to_pdf, style='Big.TButton')
        export_pdf_btn.grid(row=2, column=0, columnspan=3, pady=10, sticky='we')

        self.search_context_menu = tk.Menu(self.search_tree, tearoff=0)
        self.search_context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", command=self.delete_selected_item)

        self.search_frame.columnconfigure(1, weight=1)
        self.search_frame.rowconfigure(1, weight=1)

    # =============== –í–ö–õ–ê–î–ö–ê: –°–û–¢–†–£–î–ù–ò–ö–ò ===============
    def create_employee_tab(self):
        ttk.Label(self.employee_frame, text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫:", font=self.default_font).grid(row=0, column=0, sticky='w',
                                                                                       padx=10, pady=5)
        employees = sorted(set(item.get('assignment', '') for item in self.inventory_data if item.get('assignment')))
        self.employee_var = tk.StringVar()
        self.employee_combo = ttk.Combobox(self.employee_frame, textvariable=self.employee_var,
                                           values=employees, width=30, font=self.default_font)
        self.employee_combo.grid(row=0, column=1, padx=10, pady=5, sticky='we')
        self.bind_clipboard_events(self.employee_combo)
        self.employee_combo.bind('<<ComboboxSelected>>', self.show_employee_equipment)

        refresh_button = ttk.Button(self.employee_frame, text="–û–±–Ω–æ–≤–∏—Ç—å",
                                    command=self.refresh_employee_list, style='Big.TButton')
        refresh_button.grid(row=0, column=2, padx=10, pady=5)

        columns = ("–¢–∏–ø", "–ú–æ–¥–µ–ª—å", "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä", "–î–∞—Ç–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
        self.employee_tree = ttk.Treeview(self.employee_frame, columns=columns, show='headings', height=15)

        for col in columns:
            self.employee_tree.heading(col, text=col,
                                       command=lambda _col=col: self.treeview_sort_column(self.employee_tree, _col,
                                                                                          False))
            self.employee_tree.column(col, width=150, anchor='center')

        self.employee_tree.bind('<Double-1>', self.on_tree_double_click)
        self.employee_tree.bind('<Button-3>', self.show_context_menu)

        scrollbar = ttk.Scrollbar(self.employee_frame, orient="vertical", command=self.employee_tree.yview)
        self.employee_tree.configure(yscrollcommand=scrollbar.set)

        self.employee_tree.grid(row=1, column=0, columnspan=3, padx=10, pady=5, sticky='nsew')
        scrollbar.grid(row=1, column=3, sticky='ns', pady=5)

        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        export_pdf_btn = ttk.Button(self.employee_frame, text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF",
                                    command=self.export_employee_results_to_pdf, style='Big.TButton')
        export_pdf_btn.grid(row=2, column=0, columnspan=3, pady=10, sticky='we')

        self.employee_context_menu = tk.Menu(self.employee_tree, tearoff=0)
        self.employee_context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", command=self.delete_selected_item)

        self.employee_frame.columnconfigure(1, weight=1)
        self.employee_frame.rowconfigure(1, weight=1)

    # =============== –í–ö–õ–ê–î–ö–ê: –ü–û–ö–ê–ó–ê–¢–¨ –í–°–Å ===============
    def create_show_all_tab(self):
        refresh_button = ttk.Button(self.show_all_frame, text="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                                    command=self.show_all_data, style='Big.TButton')
        refresh_button.pack(pady=10)

        table_frame = ttk.Frame(self.show_all_frame)
        table_frame.pack(fill='both', expand=True, padx=10, pady=5)

        columns = ("–¢–∏–ø", "–ú–æ–¥–µ–ª—å", "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä", "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ", "–î–∞—Ç–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
        self.all_tree = ttk.Treeview(table_frame, columns=columns, show='headings', height=20)

        for col in columns:
            self.all_tree.heading(col, text=col,
                                  command=lambda _col=col: self.treeview_sort_column(self.all_tree, _col, False))
            self.all_tree.column(col, width=150, anchor='center')

        self.all_tree.bind('<Double-1>', self.on_tree_double_click)
        self.all_tree.bind('<Button-3>', self.show_context_menu)

        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.all_tree.yview)
        self.all_tree.configure(yscrollcommand=scrollbar.set)

        self.all_tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')

        self.all_context_menu = tk.Menu(self.all_tree, tearoff=0)
        self.all_context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", command=self.delete_selected_item)

        self.show_all_data()

    # =============== –í–ö–õ–ê–î–ö–ê: –ò–ù–§–û ===============
    def create_about_tab(self):
        center_frame = ttk.Frame(self.about_frame)
        center_frame.pack(expand=True, fill='both')

        info_text = """
        –°–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        –í–µ—Ä—Å–∏—è: 0.7 (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
        –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ: –†–∞–∑–∏–Ω –ì—Ä–∏–≥–æ—Ä–∏–π
        –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
        Email: lantester35@gmail.com
        –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
        - –í–µ–¥–µ–Ω–∏–µ —É—á–µ—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        - –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        - –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ PDF
        - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
        - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã
        - –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π (–ø—Ä–∞–≤—ã–π –∫–ª–∏–∫ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è)
        """

        about_text = scrolledtext.ScrolledText(center_frame, width=60, height=15,
                                               font=self.default_font, wrap=tk.WORD)
        about_text.insert('1.0', info_text)
        about_text.config(state='disabled')
        about_text.pack(pady=20, padx=20, expand=True)

        close_button = ttk.Button(center_frame, text="–ó–∞–∫—Ä—ã—Ç—å", command=self.root.quit, style='Big.TButton')
        close_button.pack(pady=10)

    # =============== –û–ë–©–ò–ï –ú–ï–¢–û–î–´ ===============
    def treeview_sort_column(self, tree, col, reverse):
        date_columns = ['–î–∞—Ç–∞']
        int_columns = []

        def sort_key(val):
            if col in date_columns:
                try:
                    return datetime.strptime(val, "%d.%m.%Y")
                except:
                    return datetime.min
            elif col in int_columns:
                try:
                    return int(val)
                except:
                    return -1
            else:
                return val.lower() if isinstance(val, str) else val

        data = [(tree.set(k, col), k) for k in tree.get_children('')]
        data.sort(key=lambda t: sort_key(t[0]), reverse=reverse)

        for index, (_, k) in enumerate(data):
            tree.move(k, '', index)

        serial_col = '–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä' if '–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä' in tree['columns'] else 'serial_number'

        sorted_serials = [tree.set(k, serial_col) for _, k in data]

        new_inventory = []
        for serial in sorted_serials:
            for item in self.inventory_data:
                if item.get('serial_number') == serial:
                    new_inventory.append(item)
                    break
        self.inventory_data = new_inventory

        tree.heading(col, command=lambda: self.treeview_sort_column(tree, col, not reverse))

    def show_context_menu(self, event):
        tree = event.widget
        item = tree.identify_row(event.y)

        if item:
            tree.selection_set(item)
            if tree == self.search_tree:
                self.search_context_menu.post(event.x_root, event.y_root)
            elif tree == self.employee_tree:
                self.employee_context_menu.post(event.x_root, event.y_root)
            elif tree == self.all_tree:
                self.all_context_menu.post(event.x_root, event.y_root)

    def delete_selected_item(self):
        current_tab = self.notebook.index(self.notebook.select())

        if current_tab == 1:
            tree = self.search_tree
        elif current_tab == 2:
            tree = self.employee_tree
        elif current_tab == 3:
            tree = self.all_tree
        else:
            return

        selected_items = tree.selection()
        if not selected_items:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å?"):
            return

        for item in selected_items:
            values = tree.item(item, 'values')
            serial_number = values[2]

            for i, inv_item in enumerate(self.inventory_data):
                if inv_item.get('serial_number') == serial_number:
                    del self.inventory_data[i]
                    tree.delete(item)
                    if self.save_data():
                        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                    self.refresh_employee_list()
                    if current_tab != 3:
                        self.show_all_data()
                    break

    def add_equipment(self):
        equipment_data = {}

        for field_name, entry in self.entries.items():
            if field_name == "comments":
                equipment_data[field_name] = entry.get("1.0", tk.END).strip()
            else:
                equipment_data[field_name] = entry.get().strip()

        if not equipment_data.get('equipment_type') or not equipment_data.get('serial_number'):
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä")
            return

        equipment_data['created_datetime'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.inventory_data.append(equipment_data)

        if self.save_data():
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
            self.clear_entries()
            self.refresh_employee_list()
            self.show_all_data()

    def clear_entries(self):
        for field_name, entry in self.entries.items():
            if field_name == "comments":
                entry.delete("1.0", tk.END)
            elif field_name == "date":
                entry.delete(0, tk.END)
                entry.insert(0, datetime.now().strftime("%d.%m.%Y"))
            else:
                entry.delete(0, tk.END)
        # –¢–∞–∫–∂–µ –æ—á–∏—Å—Ç–∏–º Combobox
        if 'equipment_type' in self.entries:
            self.entries['equipment_type'].set('')

    def perform_search(self, event=None):
        search_text = self.search_entry.get().lower().strip()

        for item in self.search_tree.get_children():
            self.search_tree.delete(item)

        if not search_text:
            return

        for item in self.inventory_data:
            if any(search_text in str(value).lower() for value in item.values() if value):
                self.search_tree.insert("", "end", values=(
                    item.get('equipment_type', ''),
                    item.get('model', ''),
                    item.get('serial_number', ''),
                    item.get('assignment', ''),
                    item.get('date', ''),
                    (item.get('comments', '')[:50] + '...') if item.get('comments') and len(
                        item.get('comments')) > 50 else item.get('comments', '')
                ))

    def clear_search(self):
        self.search_entry.delete(0, tk.END)
        for item in self.search_tree.get_children():
            self.search_tree.delete(item)

    def refresh_employee_list(self):
        employees = sorted(set(item.get('assignment', '') for item in self.inventory_data if item.get('assignment')))
        self.employee_combo['values'] = employees

    def show_employee_equipment(self, event=None):
        employee = self.employee_var.get()

        for item in self.employee_tree.get_children():
            self.employee_tree.delete(item)

        if not employee:
            return

        for item in self.inventory_data:
            if item.get('assignment') == employee:
                self.employee_tree.insert("", "end", values=(
                    item.get('equipment_type', ''),
                    item.get('model', ''),
                    item.get('serial_number', ''),
                    item.get('date', ''),
                    (item.get('comments', '')[:50] + '...') if item.get('comments') and len(
                        item.get('comments')) > 50 else item.get('comments', '')
                ))

    def show_all_data(self):
        for item in self.all_tree.get_children():
            self.all_tree.delete(item)
        self.inventory_data = self.load_data()
        for item in self.inventory_data:
            self.all_tree.insert("", "end", values=(
                item.get('equipment_type', ''),
                item.get('model', ''),
                item.get('serial_number', ''),
                item.get('assignment', ''),
                item.get('date', ''),
                (item.get('comments', '')[:50] + '...') if item.get('comments') and len(
                    item.get('comments')) > 50 else item.get('comments', '')
            ))

    def on_tree_double_click(self, event):
        tree = event.widget
        item = tree.identify('item', event.x, event.y)
        column = tree.identify_column(event.x)

        if not item or item not in tree.get_children():
            return

        col_index = int(column.replace('#', '')) - 1
        current_values = tree.item(item, 'values')
        current_value = current_values[col_index]

        # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ (—É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –≤ employee_tree –º–µ–Ω—å—à–µ –∫–æ–ª–æ–Ω–æ–∫)
        if tree == self.employee_tree:
            field_names = {
                0: 'equipment_type',
                1: 'model',
                2: 'serial_number',
                3: 'date',
                4: 'comments'
            }
        else:
            field_names = {
                0: 'equipment_type',
                1: 'model',
                2: 'serial_number',
                3: 'assignment',
                4: 'date',
                5: 'comments'
            }

        field_name = field_names.get(col_index)
        if not field_name:
            return

        self.edit_cell(tree, item, col_index, field_name, current_value)

    def edit_cell(self, tree, item, col_index, field_name, current_value):
        bbox = tree.bbox(item, column=f'#{col_index + 1}')
        if not bbox:  # –∏–Ω–æ–≥–¥–∞ bbox –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π –∫–æ—Ä—Ç–µ–∂, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –≤–∏–¥–µ–Ω
            return

        if field_name == 'comments':
            text_edit = scrolledtext.ScrolledText(tree, width=40, height=4, font=self.default_font)
            text_edit.insert('1.0', current_value)
            text_edit.place(x=bbox[0], y=bbox[1], width=bbox[2], height=bbox[3] * 3)
            text_edit.focus()
            self.bind_clipboard_events(text_edit)

            def save_edit(event=None):
                new_value = text_edit.get('1.0', tk.END).strip()
                text_edit.destroy()
                current_values = list(tree.item(item, 'values'))
                current_values[col_index] = new_value
                tree.item(item, values=current_values)
                serial_number = current_values[2] if len(current_values) > 2 else None
                if serial_number:
                    for inventory_item in self.inventory_data:
                        if inventory_item.get('serial_number') == serial_number:
                            inventory_item[field_name] = new_value
                            break
                    self.save_data()

            def cancel_edit(event=None):
                text_edit.destroy()

            text_edit.bind('<Return>', save_edit)
            text_edit.bind('<Escape>', cancel_edit)
            text_edit.bind('<FocusOut>', lambda e: save_edit())
        else:
            entry_edit = ttk.Entry(tree, width=bbox[2] // 8, font=self.default_font)  # —à–∏—Ä–∏–Ω–∞ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
            entry_edit.insert(0, current_value)
            entry_edit.place(x=bbox[0], y=bbox[1], width=bbox[2], height=bbox[3])
            entry_edit.focus()
            self.bind_clipboard_events(entry_edit)

            def save_edit(event=None):
                new_value = entry_edit.get().strip()
                entry_edit.destroy()
                current_values = list(tree.item(item, 'values'))
                current_values[col_index] = new_value
                tree.item(item, values=current_values)
                serial_number = current_values[2] if len(current_values) > 2 else None
                if serial_number:
                    for inventory_item in self.inventory_data:
                        if inventory_item.get('serial_number') == serial_number:
                            inventory_item[field_name] = new_value
                            break
                    self.save_data()

            def cancel_edit(event=None):
                entry_edit.destroy()

            entry_edit.bind('<Return>', save_edit)
            entry_edit.bind('<Escape>', cancel_edit)
            entry_edit.bind('<FocusOut>', lambda e: save_edit())

    def export_to_pdf(self):
        if not self.inventory_data:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        try:
            if not os.path.exists('ChakraPetch-Regular.ttf'):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞: ChakraPetch-Regular.ttf")
                return
            pdf = PDFWithCyrillic(orientation='L')
            pdf.set_auto_page_break(auto=True, margin=15)
            pdf.add_page()

            pdf.set_font("ChakraPetch", '', 18)
            pdf.cell(0, 10, "–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", 0, 1, 'C')
            pdf.ln(10)

            pdf.set_font("ChakraPetch", '', 12)
            pdf.cell(0, 10, f"–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}", 0, 1, 'R')
            pdf.ln(5)

            total_equipment = len(self.inventory_data)
            unique_employees = len(
                set(item.get('assignment', '') for item in self.inventory_data if item.get('assignment')))
            pdf.set_font("ChakraPetch", '', 14)
            pdf.cell(0, 10, "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", 0, 1)
            pdf.cell(0, 10, f"–í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {total_equipment}", 0, 1)
            pdf.cell(0, 10, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º: {unique_employees}", 0, 1)
            pdf.ln(10)

            columns = ["–¢–∏–ø", "–ú–æ–¥–µ–ª—å", "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä", "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ", "–î–∞—Ç–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"]

            data_rows = []
            for item in self.inventory_data:
                row = [
                    item.get('equipment_type', '') or '-',
                    item.get('model', '') or '-',
                    item.get('serial_number', '') or '-',
                    item.get('assignment', '') or '-',
                    item.get('date', '') or '-',
                    (item.get('comments', '')[:50] + '...') if item.get('comments') and len(
                        item.get('comments')) > 50 else (item.get('comments', '') or '-')
                ]
                data_rows.append(row)

            pdf.set_font("ChakraPetch", '', 12)
            col_widths = []
            for col_index in range(len(columns)):
                max_width = pdf.get_string_width(columns[col_index]) + 6
                for row in data_rows:
                    w = pdf.get_string_width(str(row[col_index])) + 6
                    if w > max_width:
                        max_width = w
                col_widths.append(max_width)

            pdf.set_font("ChakraPetch", '', 14)
            for i, col in enumerate(columns):
                pdf.cell(col_widths[i], 10, col, 1, 0, 'C')
            pdf.ln()

            pdf.set_font("ChakraPetch", '', 12)
            for row in data_rows:
                for i, cell_text in enumerate(row):
                    pdf.cell(col_widths[i], 10, str(cell_text), 1)
                pdf.ln()

            desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
            pdf_filename = os.path.join(desktop_path,
                                        f"inventory_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf")
            pdf.output(pdf_filename)

            webbrowser.open(pdf_filename)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ:\n{pdf_filename}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF –æ—Ç—á–µ—Ç: {e}")

    def export_search_results_to_pdf(self):
        items = self.search_tree.get_children()
        if not items:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        try:
            if not os.path.exists('ChakraPetch-Regular.ttf'):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞: ChakraPetch-Regular.ttf")
                return

            pdf = PDFWithCyrillic(orientation='L')
            pdf.set_auto_page_break(auto=True, margin=15)
            pdf.add_page()

            pdf.set_font("ChakraPetch", '', 14)
            pdf.cell(0, 10, "–û—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", 0, 1, 'C')
            pdf.ln(10)

            columns = ["–¢–∏–ø", "–ú–æ–¥–µ–ª—å", "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä", "–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ", "–î–∞—Ç–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"]

            data_rows = [self.search_tree.item(item, 'values') for item in items]

            pdf.set_font("ChakraPetch", '', 12)
            col_widths = []
            for col_index in range(len(columns)):
                max_width = pdf.get_string_width(columns[col_index]) + 6
                for row in data_rows:
                    w = pdf.get_string_width(str(row[col_index])) + 6
                    if w > max_width:
                        max_width = w
                col_widths.append(max_width)

            pdf.set_font("ChakraPetch", '', 14)
            for i, col in enumerate(columns):
                pdf.cell(col_widths[i], 10, col, 1, 0, 'C')
            pdf.ln()

            pdf.set_font("ChakraPetch", '', 12)
            for row in data_rows:
                for i, cell_text in enumerate(row):
                    pdf.cell(col_widths[i], 10, str(cell_text), 1)
                pdf.ln()

            desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
            pdf_filename = os.path.join(desktop_path,
                                        f"search_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf")
            pdf.output(pdf_filename)

            webbrowser.open(pdf_filename)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ:\n{pdf_filename}")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF –æ—Ç—á–µ—Ç: {e}")

    def export_employee_results_to_pdf(self):
        items = self.employee_tree.get_children()
        if not items:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        try:
            if not os.path.exists('ChakraPetch-Regular.ttf'):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞: ChakraPetch-Regular.ttf")
                return

            pdf = PDFWithCyrillic(orientation='L')
            pdf.set_auto_page_break(auto=True, margin=15)
            pdf.add_page()

            employee_name = self.employee_var.get()
            pdf.set_font("ChakraPetch", '', 14)
            pdf.cell(0, 10, f"–û—Ç—á–µ—Ç –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee_name}", 0, 1, 'C')
            pdf.ln(10)

            columns = ["–¢–∏–ø", "–ú–æ–¥–µ–ª—å", "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä", "–î–∞—Ç–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"]

            data_rows = [self.employee_tree.item(item, 'values') for item in items]

            pdf.set_font("ChakraPetch", '', 12)
            col_widths = []
            for col_index in range(len(columns)):
                max_width = pdf.get_string_width(columns[col_index]) + 6
                for row in data_rows:
                    w = pdf.get_string_width(str(row[col_index])) + 6
                    if w > max_width:
                        max_width = w
                col_widths.append(max_width)

            pdf.set_font("ChakraPetch", '', 14)
            for i, col in enumerate(columns):
                pdf.cell(col_widths[i], 10, col, 1, 0, 'C')
            pdf.ln()

            pdf.set_font("ChakraPetch", '', 12)
            for row in data_rows:
                for i, cell_text in enumerate(row):
                    pdf.cell(col_widths[i], 10, str(cell_text), 1)
                pdf.ln()

            desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
            pdf_filename = os.path.join(desktop_path,
                                        f"employee_equipment_{employee_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf")
            pdf.output(pdf_filename)

            webbrowser.open(pdf_filename)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ:\n{pdf_filename}")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF –æ—Ç—á–µ—Ç: {e}")


def main():
    root = tk.Tk()
    app = InventoryApp(root)
    root.mainloop()


if __name__ == "__main__":
    main()